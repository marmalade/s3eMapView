/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eMapView.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eMapViewRegister_t)(s3eMapViewCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eMapViewUnRegister_t)(s3eMapViewCallback cbid, s3eCallback fn);
typedef s3eMapView*(*s3eMapViewCreate_t)();
typedef  s3eResult(*s3eMapViewDestroy_t)(s3eMapView* pMapView);
typedef       void(*s3eMapViewSetScreenRect_t)(s3eMapView* pMapView, int x, int y, int w, int h);
typedef       void(*s3eMapViewSetVisible_t)(s3eMapView* pMapView, bool visible);
typedef       void(*s3eMapViewSetType_t)(s3eMapView* pMapView, s3eMapViewType type);
typedef       void(*s3eMapViewSetShowUserLocation_t)(s3eMapView* pMapView, bool show);
typedef       void(*_s3eMapViewGoTo_t)(s3eMapView* pMapView, const s3eMapViewCoord* center, const s3eMapViewSpan* span, bool animate);
typedef s3eMapViewPOI*(*_s3eMapViewAddPOI_t)(s3eMapView* pMapView, const s3eMapViewCoord* location, const char* title, const char* subtitle, bool clickable, void* clickData);
typedef       void(*s3eMapViewRemovePOI_t)(s3eMapView* pMapView, s3eMapViewPOI* poi);
typedef const char*(*s3eMapViewGetPlatformLicensingString_t)();

/**
 * struct that gets filled in by s3eMapViewRegister
 */
typedef struct s3eMapViewFuncs
{
    s3eMapViewRegister_t m_s3eMapViewRegister;
    s3eMapViewUnRegister_t m_s3eMapViewUnRegister;
    s3eMapViewCreate_t m_s3eMapViewCreate;
    s3eMapViewDestroy_t m_s3eMapViewDestroy;
    s3eMapViewSetScreenRect_t m_s3eMapViewSetScreenRect;
    s3eMapViewSetVisible_t m_s3eMapViewSetVisible;
    s3eMapViewSetType_t m_s3eMapViewSetType;
    s3eMapViewSetShowUserLocation_t m_s3eMapViewSetShowUserLocation;
    _s3eMapViewGoTo_t m__s3eMapViewGoTo;
    _s3eMapViewAddPOI_t m__s3eMapViewAddPOI;
    s3eMapViewRemovePOI_t m_s3eMapViewRemovePOI;
    s3eMapViewGetPlatformLicensingString_t m_s3eMapViewGetPlatformLicensingString;
} s3eMapViewFuncs;

static s3eMapViewFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x222e0d89, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eMapView");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x222e0d89, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eMapViewAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eMapViewRegister(s3eMapViewCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[0] func: s3eMapViewRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eMapViewRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eMapViewUnRegister(s3eMapViewCallback cbid, s3eCallback fn)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[1] func: s3eMapViewUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eMapViewUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eMapView* s3eMapViewCreate()
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[2] func: s3eMapViewCreate"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eMapView* ret = g_Ext.m_s3eMapViewCreate();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eMapViewDestroy(s3eMapView* pMapView)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[3] func: s3eMapViewDestroy"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eMapViewDestroy(pMapView);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eMapViewSetScreenRect(s3eMapView* pMapView, int x, int y, int w, int h)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[4] func: s3eMapViewSetScreenRect"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eMapViewSetScreenRect(pMapView, x, y, w, h);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eMapViewSetVisible(s3eMapView* pMapView, bool visible)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[5] func: s3eMapViewSetVisible"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eMapViewSetVisible(pMapView, visible);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eMapViewSetType(s3eMapView* pMapView, s3eMapViewType type)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[6] func: s3eMapViewSetType"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eMapViewSetType(pMapView, type);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eMapViewSetShowUserLocation(s3eMapView* pMapView, bool show)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[7] func: s3eMapViewSetShowUserLocation"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eMapViewSetShowUserLocation(pMapView, show);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void _s3eMapViewGoTo(s3eMapView* pMapView, const s3eMapViewCoord* center, const s3eMapViewSpan* span, bool animate)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[8] func: _s3eMapViewGoTo"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m__s3eMapViewGoTo(pMapView, center, span, animate);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eMapViewPOI* _s3eMapViewAddPOI(s3eMapView* pMapView, const s3eMapViewCoord* location, const char* title, const char* subtitle, bool clickable, void* clickData)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[9] func: _s3eMapViewAddPOI"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eMapViewPOI* ret = g_Ext.m__s3eMapViewAddPOI(pMapView, location, title, subtitle, clickable, clickData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eMapViewRemovePOI(s3eMapView* pMapView, s3eMapViewPOI* poi)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[10] func: s3eMapViewRemovePOI"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eMapViewRemovePOI(pMapView, poi);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

const char* s3eMapViewGetPlatformLicensingString()
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView[11] func: s3eMapViewGetPlatformLicensingString"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_s3eMapViewGetPlatformLicensingString();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
