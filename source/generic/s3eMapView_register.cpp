/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eMapView_autodefs.h"
#include "s3eEdk.h"
#include "s3eMapView.h"
//Declarations of Init and Term functions
extern s3eResult s3eMapViewInit();
extern void s3eMapViewTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eMapView* s3eMapViewCreate_wrap()
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewCreate"));
    return (s3eMapView*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewCreate, 0);
}

static s3eResult s3eMapViewDestroy_wrap(s3eMapView* pMapView)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewDestroy"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewDestroy, 1, pMapView);
}

static void s3eMapViewSetScreenRect_wrap(s3eMapView* pMapView, int x, int y, int w, int h)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewSetScreenRect"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewSetScreenRect, 5, pMapView, x, y, w, h);
}

static void s3eMapViewSetVisible_wrap(s3eMapView* pMapView, bool visible)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewSetVisible"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewSetVisible, 2, pMapView, visible);
}

static void s3eMapViewSetType_wrap(s3eMapView* pMapView, s3eMapViewType type)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewSetType"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewSetType, 2, pMapView, type);
}

static void s3eMapViewSetShowUserLocation_wrap(s3eMapView* pMapView, bool show)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewSetShowUserLocation"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewSetShowUserLocation, 2, pMapView, show);
}

static void _s3eMapViewGoTo_wrap(s3eMapView* pMapView, const s3eMapViewCoord* center, const s3eMapViewSpan* span, bool animate)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: _s3eMapViewGoTo"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)_s3eMapViewGoTo, 4, pMapView, center, span, animate);
}

static s3eMapViewPOI* _s3eMapViewAddPOI_wrap(s3eMapView* pMapView, const s3eMapViewCoord* location, const char* title, const char* subtitle, bool clickable, void* clickData)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: _s3eMapViewAddPOI"));
    return (s3eMapViewPOI*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)_s3eMapViewAddPOI, 6, pMapView, location, title, subtitle, clickable, clickData);
}

static void s3eMapViewRemovePOI_wrap(s3eMapView* pMapView, s3eMapViewPOI* poi)
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewRemovePOI"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewRemovePOI, 2, pMapView, poi);
}

static const char* s3eMapViewGetPlatformLicensingString_wrap()
{
    IwTrace(MAPVIEW_VERBOSE, ("calling s3eMapView func on main thread: s3eMapViewGetPlatformLicensingString"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eMapViewGetPlatformLicensingString, 0);
}

#define s3eMapViewCreate s3eMapViewCreate_wrap
#define s3eMapViewDestroy s3eMapViewDestroy_wrap
#define s3eMapViewSetScreenRect s3eMapViewSetScreenRect_wrap
#define s3eMapViewSetVisible s3eMapViewSetVisible_wrap
#define s3eMapViewSetType s3eMapViewSetType_wrap
#define s3eMapViewSetShowUserLocation s3eMapViewSetShowUserLocation_wrap
#define _s3eMapViewGoTo _s3eMapViewGoTo_wrap
#define _s3eMapViewAddPOI _s3eMapViewAddPOI_wrap
#define s3eMapViewRemovePOI s3eMapViewRemovePOI_wrap
#define s3eMapViewGetPlatformLicensingString s3eMapViewGetPlatformLicensingString_wrap

#endif

s3eResult s3eMapViewRegister(s3eMapViewCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_MAPVIEW_HASH, S3E_MAPVIEW_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eMapViewUnRegister(s3eMapViewCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_MAPVIEW_HASH, S3E_MAPVIEW_CALLBACK_MAX, cbid, fn);
}

void s3eMapViewRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[12];
    funcPtrs[0] = (void*)s3eMapViewRegister;
    funcPtrs[1] = (void*)s3eMapViewUnRegister;
    funcPtrs[2] = (void*)s3eMapViewCreate;
    funcPtrs[3] = (void*)s3eMapViewDestroy;
    funcPtrs[4] = (void*)s3eMapViewSetScreenRect;
    funcPtrs[5] = (void*)s3eMapViewSetVisible;
    funcPtrs[6] = (void*)s3eMapViewSetType;
    funcPtrs[7] = (void*)s3eMapViewSetShowUserLocation;
    funcPtrs[8] = (void*)_s3eMapViewGoTo;
    funcPtrs[9] = (void*)_s3eMapViewAddPOI;
    funcPtrs[10] = (void*)s3eMapViewRemovePOI;
    funcPtrs[11] = (void*)s3eMapViewGetPlatformLicensingString;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[12] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("s3eMapView", funcPtrs, sizeof(funcPtrs), flags, s3eMapViewInit, s3eMapViewTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eMapViewStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eMapViewRegisterExt;
    return 0;
}

int g_s3eMapViewVal = s3eMapViewStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eMapViewRegisterExt();
}
#endif

#endif
